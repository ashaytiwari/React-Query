{"version":3,"sources":["components/Navbar.js","components/Planet.js","components/Planets.js","components/Person.js","components/People.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","setPage","onClick","Planet","planet","className","name","population","terrain","fetchPlanets","id","a","console","log","fetch","res","json","Planets","useState","pageNo","setPageNo","useQuery","keepPreviousData","data","status","isPreviousData","old","Math","max","disabled","next","results","map","Person","person","gender","birth_year","fetchPeople","People","queryClient","QueryClient","App","page","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7327e3b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = (props) => {\n  const { setPage } = props;\n  return (\n    <nav>\n      <button onClick={() => setPage(\"planets\")}>Planets</button>\n      <button onClick={() => setPage(\"peoples\")}>Peoples</button>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst Planet = ({ planet }) => {\n  return (\n    <div className=\"card\">\n      <h3>{planet.name}</h3>\n      <p>Population - {planet.population}</p>\n      <p>Terrain - {planet.terrain}</p>\n    </div>\n  );\n};\n\nexport default Planet;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport Planet from \"./Planet\";\n\nconst fetchPlanets = async (id) => {\n  console.log(id);\n  const res = await fetch(`https://swapi.dev/api/planets/?page=${id}`);\n  return res.json();\n};\n\nconst Planets = () => {\n  const [pageNo, setPageNo] = useState(1);\n  const { data, status, isPreviousData } = useQuery(\n    [\"planets\", pageNo],\n    () => fetchPlanets(pageNo),\n    {\n      keepPreviousData: true\n    }\n  );\n  console.log(data, status, isPreviousData);\n\n  return (\n    <div>\n      <h2>Planets</h2>\n      {status === \"loading\" && <div>Loading data....</div>}\n      {status === \"error\" && <div>Error in fetching data</div>}\n      {status === \"success\" && (\n        <>\n          <button\n            onClick={() => setPageNo((old) => Math.max(old - 1, 0))}\n            disabled={pageNo === 1}\n          >\n            prev\n          </button>{\" \"}\n          <span>{pageNo}</span>\n          <button\n            onClick={() => {\n              if (!isPreviousData && data.next) {\n                console.log(\"alert\");\n                setPageNo((old) => old + 1);\n              }\n            }}\n            // Disable the Next Page button until we know a next page is available\n            disabled={!data.next}\n          >\n            next\n          </button>\n          {console.log(pageNo)}\n          <div>\n            {data.results.map((planet) => (\n              <Planet planet={planet} key={planet.name} />\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Planets;\n","import React from \"react\";\n\nconst Person = ({ person }) => {\n  return (\n    <div className=\"card\">\n      <h3>{person.name}</h3>\n      <p>Gender - {person.gender}</p>\n      <p>Birth Year - {person.birth_year}</p>\n    </div>\n  );\n};\n\nexport default Person;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport Person from \"./Person\";\n\nconst fetchPeople = async (pageNo) => {\n  const res = await fetch(`https://swapi.dev/api/people/?page=${pageNo}`);\n  return res.json();\n};\n\nconst People = () => {\n  const [pageNo, setPageNo] = useState(1);\n  const { data, status, isPreviousData } = useQuery(\n    [\"people\", pageNo],\n    () => fetchPeople(pageNo),\n    { keepPreviousData: true }\n  );\n  console.log(data, status);\n\n  return (\n    <div>\n      <h2>Peoples</h2>\n      {status === \"loading\" && <div>Loading data....</div>}\n      {status === \"error\" && <div>Error in fetching data</div>}\n      {status === \"success\" && (\n        <>\n          <button\n            onClick={() => setPageNo((old) => Math.max(old - 1, 0))}\n            disabled={pageNo === 1}\n          >\n            prev\n          </button>{\" \"}\n          <span>{pageNo}</span>\n          <button\n            onClick={() => {\n              if (!isPreviousData && data.next) {\n                console.log(\"alert\");\n                setPageNo((old) => old + 1);\n              }\n            }}\n            // Disable the Next Page button until we know a next page is available\n            disabled={!data.next}\n          >\n            next\n          </button>\n          <div>\n            {data.results.map((person) => (\n              <Person person={person} key={person.name} />\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default People;\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport React, { useState } from \"react\";\nimport Planets from \"./components/Planets\";\nimport Peoples from \"./components/People\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  const [page, setPage] = useState(\"planets\");\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div className=\"App\">\n        <h1>Star Wars Info</h1>\n        <Navbar setPage={setPage} />\n        <div className=\"content\">\n          {page === \"planets\" ? <Planets /> : <Peoples />}\n        </div>\n      </div>\n      {/* <ReactQueryDevtools initialIsOpen={false} /> */}\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}